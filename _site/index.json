{
  "api/ASE_Assignment.AppStoredProgram.html": {
    "href": "api/ASE_Assignment.AppStoredProgram.html",
    "title": "Class AppStoredProgram | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class AppStoredProgram Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a stored program application for managing canvas commands and variables. public class AppStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram AppStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppStoredProgram(ICanvas) Initializes a new instance of the AppStoredProgram class with the specified canvas. public AppStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas on which to execute commands. Fields SyntaxOk Indicates if the syntax of the program is correct. public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter. public override int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the program. public override int Add(Command C) Parameters C Command The command to add. Returns int The index of the added command. Exceptions StoredProgramException Thrown when the command is null. AddMethod(Method) Adds a method to the program. public override void AddMethod(Method M) Parameters M Method The method to add. AddVariable(Evaluation) Adds a variable to the program. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. Commandsleft() Checks if there are commands left to execute. public override bool Commandsleft() Returns bool true if there are commands left; otherwise, false. DeleteVariable(string) Deletes a variable by name. public override void DeleteVariable(string varName) Parameters varName string The name of the variable to delete. EvaluateExpression(string) Evaluates a mathematical expression and returns the result as a string. public override string EvaluateExpression(string Exp) Parameters Exp string The expression to evaluate. Returns string The evaluated result as a string. Exceptions StoredProgramException Thrown when the expression syntax is invalid. EvaluateExpressionWithString(string) Evaluates a string expression and returns the result as a string. public override string EvaluateExpressionWithString(string expression) Parameters expression string The expression to evaluate. Returns string The evaluated result as a string. FindVariable(string) Finds the index of a variable by name. public override int FindVariable(string varName) Parameters varName string The name of the variable. Returns int The index of the variable. GetMethod(string) Retrieves a method by name. public override Method GetMethod(string MethodName) Parameters MethodName string The name of the method. Returns Method The method object. Exceptions StoredProgramException Thrown when the method is not found. GetVarValue(string) Retrieves the value of a variable by name. public override string GetVarValue(string varName) Parameters varName string The name of the variable. Returns string The value of the variable. Exceptions StoredProgramException Thrown when the variable is not found. GetVariable(int) Retrieves a variable by index. public override Evaluation GetVariable(int index) Parameters index int The index of the variable. Returns Evaluation The variable object. Exceptions StoredProgramException Thrown when the index is invalid. GetVariable(string) Retrieves a variable by name. public override Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable. Returns Evaluation The variable object. Exceptions StoredProgramException Thrown when the variable is not found. IsExpression(string) Checks if a string is a valid expression. public override bool IsExpression(string expression) Parameters expression string The expression to check. Returns bool true if the string is a valid expression; otherwise, false. NextCommand() Retrieves the next command to be executed. public override object NextCommand() Returns object The next command object. Pop() Pops a conditional command from the stack. public override ConditionalCommand Pop() Returns ConditionalCommand The popped conditional command. Exceptions StoredProgramException Thrown when there is an error popping from the stack. Push(ConditionalCommand) Pushes a conditional command onto the stack. public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The conditional command to push. ResetProgram() Resets the program, clearing the canvas and variables. public virtual void ResetProgram() Run() Runs the program, executing all commands sequentially. public override void Run() UpdateVariable(string, bool) Updates the value of a variable with a boolean value. public override void UpdateVariable(string varName, bool value) Parameters varName string The name of the variable. value bool The new value. Exceptions CommandException Thrown when the variable type is invalid. UpdateVariable(string, double) Updates the value of a variable with a double value. public override void UpdateVariable(string varName, double value) Parameters varName string The name of the variable. value double The new value. Exceptions CommandException Thrown when the variable type is invalid. UpdateVariable(string, int) Updates the value of a variable with an integer value. public override void UpdateVariable(string varName, int value) Parameters varName string The name of the variable. value int The new value. Exceptions CommandException Thrown when the variable type is invalid. VariableExists(string) Checks if a variable exists by name. public override bool VariableExists(string varName) Parameters varName string The name of the variable. Returns bool true if the variable exists; otherwise, false."
  },
  "api/ASE_Assignment.ArrayApp.html": {
    "href": "api/ASE_Assignment.ArrayApp.html",
    "title": "Class ArrayApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ArrayApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents an array application command that handles operations on arrays such as \"poke\" and \"peek\". This class supports both integer and real arrays. public class ArrayApp : Evaluation, ICommand Inheritance object Command Evaluation ArrayApp Implements ICommand Derived PeekApp PokeApp Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ArrayApp() Initializes a new instance of the ArrayApp class. public ArrayApp() Fields IntValue The integer value used in array operations. protected int IntValue Field Value int PEEK Constant for the \"peek\" operation (false). protected const bool PEEK = false Field Value bool POKE Constant for the \"poke\" operation (true). public const bool POKE = true Field Value bool RealValue The real value used in array operations. protected double RealValue Field Value double columnCurrent The current column index used in array operations. protected int columnCurrent Field Value int columnExpression The column expression used in array operations. protected string columnExpression Field Value string columnsCount The number of columns in the array (default is 1). protected int columnsCount Field Value int intArray The integer array used for storage. protected int[,] intArray Field Value int[,] peekValue The variable for peek operations. protected string peekValue Field Value string pokeValue The variable for poke operations. protected string pokeValue Field Value string realArray The real array used for storage. protected double[,] realArray Field Value double[,] rowCurrent The current row index used in array operations. protected int rowCurrent Field Value int rowExpression The row expression used in array operations. protected string rowExpression Field Value string rowsCount The number of rows in the array. protected int rowsCount Field Value int type The type of the array (either \"int\" or \"real\"). protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Defines restrictions for the array application. public void ArrayRestrictions() CheckParameters(string[]) Validates the parameters for the array application. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters for the array operation. Compile() Compiles the array definition by validating parameters and adding the array to the program's variable list. public override void Compile() Execute() Executes the array operation, initializing the array with the appropriate type (integer or real). public override void Execute() GetIntArray(int, int) Gets the value from the specified row and column in the integer array. public virtual int GetIntArray(int row, int col) Parameters row int The row index. col int The column index. Returns int The value from the integer array. GetRealArray(int, int) Gets the value from the specified row and column in the real array. public virtual double GetRealArray(int row, int col) Parameters row int The row index. col int The column index. Returns double The value from the real array. ProcessArrayParametersCompile(bool) Processes the array parameters during compilation for \"poke\" or \"peek\" operations. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is \"poke\" (true) or \"peek\" (false). ProcessArrayParametersExecute(bool) Executes the array operation, either setting or retrieving a value from the array. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is \"poke\" (true) or \"peek\" (false). ReduceRestrictionCounter() Reduces the restriction counter for the array. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets a value at the specified row and column in the integer array. public virtual void SetIntArray(int value, int row, int col) Parameters value int The value to set. row int The row index. col int The column index. SetRealArray(double, int, int) Sets a value at the specified row and column in the real array. public virtual void SetRealArray(double value, int row, int col) Parameters value double The value to set. row int The row index. col int The column index."
  },
  "api/ASE_Assignment.BooleanApp.html": {
    "href": "api/ASE_Assignment.BooleanApp.html",
    "title": "Class BooleanApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class BooleanApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a Boolean application command, extending the functionality of the base BOOSE.Boolean class. public class BooleanApp : Boolean, ICommand Inheritance object Command Evaluation Boolean BooleanApp Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines restrictions for the Boolean application. Currently, no specific restrictions are applied. public override void Restrictions()"
  },
  "api/ASE_Assignment.CastApp.html": {
    "href": "api/ASE_Assignment.CastApp.html",
    "title": "Class CastApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class CastApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents the \"Cast\" command, used to cast values between variables of the different types. public class CastApp : Command, ICommand Inheritance object Command CastApp Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters for the \"Cast\" command. Ensures exactly two parameters are provided. public override void CheckParameters(string[] parameter) Parameters parameter string[] The array of parameters to validate. Exceptions CommandException Thrown when the number of parameters is not exactly two. Compile() Compiles the \"Cast\" command, validating the existence of source and target variables, and ensuring the source variable is not of type RealApplication. public override void Compile() Exceptions CommandException Thrown when one or both variables do not exist, or when attempting to cast from Real to Int. Execute() Executes the \"Cast\" command by casting the value of the source variable to the target variable. Ensures the value of a RealApp variable is cast to an IntApp variable. public override void Execute() Exceptions InvalidCastException Thrown if the cast operation fails due to type mismatch."
  },
  "api/ASE_Assignment.ComdCircle.html": {
    "href": "api/ASE_Assignment.ComdCircle.html",
    "title": "Class ComdCircle | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ComdCircle Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a command to draw a circle on a canvas. public class ComdCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter ComdCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ComdCircle() Initializes a new instance of the ComdCircle class. public ComdCircle() ComdCircle(Canvas, int) Initializes a new instance of the ComdCircle class with a specified canvas and radius. public ComdCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() Executes the command to draw a circle on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.ComdClear.html": {
    "href": "api/ASE_Assignment.ComdClear.html",
    "title": "Class ComdClear | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ComdClear Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a command to clear all elements from the canvas. public class ComdClear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter ComdClear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ComdClear() Initializes a new instance of the ComdClear class. public ComdClear() ComdClear(Canvas) Initializes a new instance of the ComdClear class with the specified canvas. public ComdClear(Canvas c) Parameters c Canvas The canvas to clear. Methods CheckParameters(string[]) Validates the parameters for the clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks No parameters are required for this command, so no validation is performed. Execute() Executes the clear command, removing all elements from the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.ComdDrawTo.html": {
    "href": "api/ASE_Assignment.ComdDrawTo.html",
    "title": "Class ComdDrawTo | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ComdDrawTo Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll public class ComdDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters ComdDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ComdDrawTo() Initializes a new instance of the ComdDrawTo class. public ComdDrawTo() ComdDrawTo(Canvas, int, int) Initializes a new instance of the ComdDrawTo class with the specified canvas and coordinates. public ComdDrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas to draw on. x int The x-coordinate to draw to. y int The y-coordinate to draw to. Exceptions RestrictionException Thrown when coordinates are negative. Methods CheckParameters(string[]) Validates the parameters for the draw-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown when the parameters are invalid. Execute() public override void Execute()"
  },
  "api/ASE_Assignment.ComdFill.html": {
    "href": "api/ASE_Assignment.ComdFill.html",
    "title": "Class ComdFill | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ComdFill Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll A command class that fills a shape on the canvas based on the given text. public class ComdFill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter ComdFill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ComdFill() Initializes a new instance of the MyAppFill class. public ComdFill() ComdFill(Canvas, string) Initializes a new instance of the MyAppFill class with a canvas and text. public ComdFill(Canvas c, string text) Parameters c Canvas The canvas to apply the fill command. text string The text to determine the fill state. Exceptions ArgumentNullException Thrown if text is null. Methods CheckParameters(string[]) Checks if the parameters passed to the command are valid. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown if the parameters are invalid. Execute() Executes the fill command by setting the filled state of the shape. public override void Execute() SetFilled(string) public void SetFilled(string isFilledStr) Parameters isFilledStr string"
  },
  "api/ASE_Assignment.ComdMoveTo.html": {
    "href": "api/ASE_Assignment.ComdMoveTo.html",
    "title": "Class ComdMoveTo | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ComdMoveTo Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a command to move the canvas cursor to specified coordinates. public class ComdMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters ComdMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ComdMoveTo() Initializes a new instance of the ComdMoveTo class. public ComdMoveTo() ComdMoveTo(Canvas, int, int) Initializes a new instance of the ComdMoveTo class with the specified canvas and coordinates. public ComdMoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which the move command will be executed. x int The X-coordinate to move to. y int The Y-coordinate to move to. Exceptions RestrictionException Thrown when the coordinates exceed the allowed range (2000). Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings representing the command parameters. Exceptions CommandException Thrown when: The number of parameters is not exactly two. Either parameter is not a non-negative integer or is out of the allowed range. Execute() Executes the move-to command, moving the canvas cursor to the specified coordinates. public override void Execute() Remarks The coordinates are validated before execution. If the coordinates exceed the allowed range or are invalid, an exception will be thrown. Exceptions RestrictionException Thrown when the coordinates exceed the allowed range (2000). IndexOutOfRangeException Thrown when parameter indices are invalid or out of range. Exception Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment.ComdPenColour.html": {
    "href": "api/ASE_Assignment.ComdPenColour.html",
    "title": "Class ComdPenColour | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ComdPenColour Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a command to set the pen color using RGB values. public class ComdPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters ComdPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ComdPenColour() Initializes a new instance of the ComdPenColour class. public ComdPenColour() ComdPenColour(Canvas, int, int, int) Initializes a new instance of the ComdPenColour class with the specified canvas and RGB values. public ComdPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas on which the pen color will be set. r int The red component of the color (0-255). g int The green component of the color (0-255). b int The blue component of the color (0-255). Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings representing the RGB parameters. Exceptions CommandException Thrown when: The number of parameters is not exactly three. Any parameter is not an integer or is out of the range (0-255). Execute() Executes the command to set the pen color on the canvas. public override void Execute() Remarks RGB values must be validated to ensure they fall within the range of 0-255. If the values are invalid, an exception will be thrown. Exceptions RestrictionException Thrown when any RGB component is out of the allowed range (0-255). IndexOutOfRangeException Thrown when parameter indices are invalid or out of range. Exception Thrown when an unexpected error occurs during execution."
  },
  "api/ASE_Assignment.ComdRectangle.html": {
    "href": "api/ASE_Assignment.ComdRectangle.html",
    "title": "Class ComdRectangle | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ComdRectangle Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a command to draw a rectangle on a canvas. public class ComdRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters ComdRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ComdRectangle() Initializes a new instance of the ComdRectangle class. public ComdRectangle() ComdRectangle(Canvas, int, int) Initializes a new instance of the ComdRectangle class with the specified canvas, width, and height. public ComdRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which to draw the rectangle. width int The width of the rectangle. height int The height of the rectangle. Methods CheckParameters(string[]) Validates the parameters for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown when the parameters are invalid. Execute() Executes the rectangle drawing command. public override void Execute()"
  },
  "api/ASE_Assignment.ComdReset.html": {
    "href": "api/ASE_Assignment.ComdReset.html",
    "title": "Class ComdReset | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ComdReset Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a command to reset the canvas. public class ComdReset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter ComdReset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ComdReset() Initializes a new instance of the ComdReset class. public ComdReset() ComdReset(Canvas) Initializes a new instance of the ComdReset class with the specified canvas. public ComdReset(Canvas c) Parameters c Canvas The canvas to reset. Methods CheckParameters(string[]) Validates the parameters for the reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks No parameters are required for this command, so no validation is performed. Execute() Executes the reset command, resetting the canvas to its default state. public override void Execute()"
  },
  "api/ASE_Assignment.ComdTriangle.html": {
    "href": "api/ASE_Assignment.ComdTriangle.html",
    "title": "Class ComdTriangle | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ComdTriangle Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a command to draw a triangle on a canvas. public class ComdTriangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters ComdTriangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ComdTriangle() Initializes a new instance of the ComdTriangle class. public ComdTriangle() ComdTriangle(Canvas, int, int) Initializes a new instance of the ComdTriangle class with the specified canvas, base length, and height. public ComdTriangle(Canvas c, int baseLength, int height) Parameters c Canvas The canvas to draw the triangle on. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates the parameters for the triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown when the parameter list is invalid or incomplete. Execute() Executes the command to draw a triangle on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.ComdWriteText.html": {
    "href": "api/ASE_Assignment.ComdWriteText.html",
    "title": "Class ComdWriteText | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ComdWriteText Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a command that writes text on a canvas. public class ComdWriteText : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter ComdWriteText Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ComdWriteText() Initializes a new instance of the WriteTextCommand class. public ComdWriteText() ComdWriteText(Canvas, string) Initializes a new instance of the WriteTextCommand class with a specified canvas and text. public ComdWriteText(Canvas c, string text) Parameters c Canvas The canvas on which the text will be written. text string The text to be written on the canvas. Methods CheckParameters(string[]) Validates the provided parameters for the command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters to check. Exceptions CommandException Thrown if the parameters are null, have an incorrect number of elements, or contain invalid text. Execute() Executes the command to write text on the canvas. public override void Execute() Exceptions RestrictionException Thrown if the text is null, empty, whitespace, or exceeds 100 characters."
  },
  "api/ASE_Assignment.CompoundCommandApp.html": {
    "href": "api/ASE_Assignment.CompoundCommandApp.html",
    "title": "Class CompoundCommandApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class CompoundCommandApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll public class CompoundCommandApp : ConditionalCommandApp, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ConditionalCommandApp CompoundCommandApp Implements ICommand Derived ElseApp EndApp IfApp WhileApp Inherited Members ConditionalCommandApp.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CompoundCommandApp() public CompoundCommandApp() Properties CorrespondingCommand public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) public override void CheckParameters(string[] parameters) Parameters parameters string[] Compile() public override void Compile() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Assignment.ConditionalCommandApp.html": {
    "href": "api/ASE_Assignment.ConditionalCommandApp.html",
    "title": "Class ConditionalCommandApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ConditionalCommandApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll public class ConditionalCommandApp : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ConditionalCommandApp Implements ICommand Derived CompoundCommandApp Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Assignment.ElseApp.html": {
    "href": "api/ASE_Assignment.ElseApp.html",
    "title": "Class ElseApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ElseApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents the \"Else\" command in the application, used for handling conditional branching. public class ElseApp : CompoundCommandApp, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ConditionalCommandApp CompoundCommandApp ElseApp Implements ICommand Inherited Members CompoundCommandApp.CorrespondingCommand CompoundCommandApp.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ElseApp() Initializes a new instance of the ElseApp class. public ElseApp() Properties CorrespondingEnd Gets or sets the corresponding BOOSE.End command for the \"Else\" block. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters passed to the \"Else\" command. Ensures the parameters match the expected \"else\" keyword. public override void CheckParameters(string[] parameters) Parameters parameters string[] The list of parameters for the \"Else\" command. Exceptions CommandException Thrown when the parameters are invalid or do not match the expected \"else\". Compile() Compiles the \"Else\" command, linking it to its corresponding compound command and recording its line number in the program. public override void Compile() Exceptions CommandException Thrown if there is an issue with the program stack or the corresponding command. Execute() Executes the \"Else\" command by checking the condition of the corresponding command. Skips the \"Else\" block if the condition of the associated \"If\" command evaluates to true. public override void Execute()"
  },
  "api/ASE_Assignment.EndApp.html": {
    "href": "api/ASE_Assignment.EndApp.html",
    "title": "Class EndApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class EndApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents the \"End\" command in the application, used to mark the end of compound commands such as loops or its conditional statements. public class EndApp : CompoundCommandApp, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ConditionalCommandApp CompoundCommandApp EndApp Implements ICommand Inherited Members CompoundCommandApp.CorrespondingCommand CompoundCommandApp.CheckParameters(string[]) CompoundCommandApp.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EndApp() Initializes a new instance of the EndApp class. public EndApp() Methods Compile() Compiles the \"End\" command, linking it to its corresponding compound command (e.g., If, While, For). Validates proper syntax for ending the respective compound command. public override void Compile() Exceptions CommandException Thrown if the syntax for the \"End\" command does not match the expected type (e.g., \"ifEnd\", \"whileEnd\", \"forEnd\"). Execute() Executes the \"End\" command, updating the program counter or managing loop/conditional execution flow. Handles loop iterations for WhileApp and BOOSE.For. public override void Execute() Exceptions CommandException Thrown if a loop control variable does not exist or if the loop step causes invalid termination conditions."
  },
  "api/ASE_Assignment.ForApp.html": {
    "href": "api/ASE_Assignment.ForApp.html",
    "title": "Class ForApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class ForApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll public class ForApp : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For ForApp Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Assignment.Form1.html": {
    "href": "api/ASE_Assignment.Form1.html",
    "title": "Class Form1 | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class Form1 Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment.GlobalConfig.html": {
    "href": "api/ASE_Assignment.GlobalConfig.html",
    "title": "Class GlobalConfig | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class GlobalConfig Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll public class GlobalConfig Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled Gets or sets the status of the file operation. public static bool IsFillEnabled { get; set; } Property Value bool Remarks Indicates whether the file operation status is active or inactive. Default value is false. OutputExceptionMsg public static string OutputExceptionMsg { get; } Property Value string"
  },
  "api/ASE_Assignment.IfApp.html": {
    "href": "api/ASE_Assignment.IfApp.html",
    "title": "Class IfApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class IfApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a conditional \"If\" statement in the application, allowing for conditional execution of commands. public class IfApp : CompoundCommandApp, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ConditionalCommandApp CompoundCommandApp IfApp Implements ICommand Inherited Members CompoundCommandApp.CorrespondingCommand CompoundCommandApp.CheckParameters(string[]) CompoundCommandApp.Compile() CompoundCommandApp.ResetOrDecreaseCount(int) ConditionalCommandApp.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IfApp() Initializes a new instance of the IfApp class. public IfApp() Methods ReduceRestrictions() Reduces any restrictions or constraints associated with the \"If\" command. This method is currently not implemented. protected void ReduceRestrictions()"
  },
  "api/ASE_Assignment.IntApp.html": {
    "href": "api/ASE_Assignment.IntApp.html",
    "title": "Class IntApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class IntApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents an integer variable or operation in the application. public class IntApp : Int, ICommand Inheritance object Command Evaluation Int IntApp Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines any restrictions or constraints for the integer variable or operation. This method is currently not implemented. public override void Restrictions()"
  },
  "api/ASE_Assignment.MethodApp.html": {
    "href": "api/ASE_Assignment.MethodApp.html",
    "title": "Class MethodApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class MethodApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll public class MethodApp : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method MethodApp Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MethodApp() public MethodApp() Methods ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int ResetOrDecreaseMethodCount(int) public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Assignment.MyAppCanvas.MyAppParser.html": {
    "href": "api/ASE_Assignment.MyAppCanvas.MyAppParser.html",
    "title": "Class MyAppParser | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class MyAppParser Namespace ASE_Assignment.MyAppCanvas Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a parser for interpreting and executing commands within a program. public class MyAppParser : IParser Inheritance object MyAppParser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyAppParser(CommandFactory, StoredProgram) public MyAppParser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory program StoredProgram Methods ParseCommand(string) public virtual ICommand ParseCommand(string line) Parameters line string Returns ICommand ParseProgram(string) public virtual void ParseProgram(string program) Parameters program string"
  },
  "api/ASE_Assignment.MyAppCanvas.MyCanvas.html": {
    "href": "api/ASE_Assignment.MyAppCanvas.MyCanvas.html",
    "title": "Class MyCanvas | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class MyCanvas Namespace ASE_Assignment.MyAppCanvas Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll public class MyCanvas : ICanvas Inheritance object MyCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyCanvas() public MyCanvas() Properties Filled public bool Filled { get; set; } Property Value bool PenColour public object PenColour { get; set; } Property Value object Xpos public int Xpos { get; set; } Property Value int Ypos public int Ypos { get; set; } Property Value int Methods Circle(int, bool) public void Circle(int radius, bool filled) Parameters radius int filled bool Clear() public void Clear() CountToLimit(int) public int CountToLimit(int limit) Parameters limit int Returns int DrawTo(int, int) public void DrawTo(int x, int y) Parameters x int y int EvaluateIfElse(bool, string, string) public string EvaluateIfElse(bool condition, string trueResult, string falseResult) Parameters condition bool trueResult string falseResult string Returns string ExecuteForLoop(int) public int ExecuteForLoop(int iterations) Parameters iterations int Returns int GetGraphics() public Graphics GetGraphics() Returns Graphics GetPenSize() public int GetPenSize() Returns int GetVariable<T>(string) public T GetVariable<T>(string name) Parameters name string Returns T Type Parameters T MoveTo(int, int) public void MoveTo(int x, int y) Parameters x int y int Rect(int, int, bool) public void Rect(int width, int height, bool filled) Parameters width int height int filled bool Reset() public void Reset() Set(int, int) public void Set(int xsize, int ysize) Parameters xsize int ysize int SetCanvas(Bitmap, Graphics) public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap newGraphics Graphics SetColour(int, int, int) public void SetColour(int red, int green, int blue) Parameters red int green int blue int SetPenSize(int) public void SetPenSize(int size) Parameters size int SetVariable<T>(string, T) public void SetVariable<T>(string name, T value) Parameters name string value T Type Parameters T SumArray(string) public int SumArray(string arrayName) Parameters arrayName string Returns int Tri(int, int) public void Tri(int width, int height) Parameters width int height int WriteText(string) public void WriteText(string text) Parameters text string getBitmap() public object getBitmap() Returns object"
  },
  "api/ASE_Assignment.MyAppCanvas.html": {
    "href": "api/ASE_Assignment.MyAppCanvas.html",
    "title": "Namespace ASE_Assignment.MyAppCanvas | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Namespace ASE_Assignment.MyAppCanvas Classes MyAppParser Represents a parser for interpreting and executing commands within a program. MyCanvas"
  },
  "api/ASE_Assignment.PeekApp.html": {
    "href": "api/ASE_Assignment.PeekApp.html",
    "title": "Class PeekApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class PeekApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a command to perform a Peek operation on an array, allowing retrieval of array elements. public class PeekApp : ArrayApp, ICommand Inheritance object Command Evaluation ArrayApp PeekApp Implements ICommand Inherited Members ArrayApp.PEEK ArrayApp.POKE ArrayApp.type ArrayApp.IntValue ArrayApp.RealValue ArrayApp.rowsCount ArrayApp.columnsCount ArrayApp.intArray ArrayApp.realArray ArrayApp.pokeValue ArrayApp.peekValue ArrayApp.rowExpression ArrayApp.columnExpression ArrayApp.rowCurrent ArrayApp.columnCurrent ArrayApp.Rows ArrayApp.Columns ArrayApp.ArrayRestrictions() ArrayApp.ReduceRestrictionCounter() ArrayApp.ProcessArrayParametersCompile(bool) ArrayApp.ProcessArrayParametersExecute(bool) ArrayApp.SetIntArray(int, int, int) ArrayApp.SetRealArray(double, int, int) ArrayApp.GetIntArray(int, int) ArrayApp.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PeekApp() Initializes a new instance of the PeekApp class. public PeekApp() Methods CheckParameters(string[]) Validates the parameters for the Peek operation. This method is currently not implemented. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters passed to the command. Exceptions NotImplementedException Thrown because parameter validation is not implemented. Compile() Compiles the Peek operation, preparing it for execution. Processes array parameters specific to the Peek operation during compilation. public override void Compile() Execute() Executes the Peek operation. Retrieves the value of a specified array element and updates the corresponding variable in the program. public override void Execute() Exceptions CommandException Thrown when the array type is unsupported during the Peek operation."
  },
  "api/ASE_Assignment.PokeApp.html": {
    "href": "api/ASE_Assignment.PokeApp.html",
    "title": "Class PokeApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class PokeApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a command to perform a Poke operation on an array, allowing modification of array elements. public class PokeApp : ArrayApp, ICommand Inheritance object Command Evaluation ArrayApp PokeApp Implements ICommand Inherited Members ArrayApp.PEEK ArrayApp.POKE ArrayApp.type ArrayApp.IntValue ArrayApp.RealValue ArrayApp.rowsCount ArrayApp.columnsCount ArrayApp.intArray ArrayApp.realArray ArrayApp.pokeValue ArrayApp.peekValue ArrayApp.rowExpression ArrayApp.columnExpression ArrayApp.rowCurrent ArrayApp.columnCurrent ArrayApp.Rows ArrayApp.Columns ArrayApp.ArrayRestrictions() ArrayApp.ReduceRestrictionCounter() ArrayApp.ProcessArrayParametersCompile(bool) ArrayApp.ProcessArrayParametersExecute(bool) ArrayApp.SetIntArray(int, int, int) ArrayApp.SetRealArray(double, int, int) ArrayApp.GetIntArray(int, int) ArrayApp.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PokeApp() Initializes a new instance of the PokeApp class. public PokeApp() Methods CheckParameters(string[]) Validates the parameters for the Poke operation. Ensures that the number of parameters is either 2 or 3. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of parameters passed to the command. Exceptions CommandException Thrown when the number of parameters is invalid. Compile() Compiles the Poke operation, preparing it for execution. Processes array parameters specific to the Poke operation during compilation. public override void Compile() Execute() Executes the Poke operation. Modifies the specified array element based on the parameters provided. public override void Execute() Set(StoredProgram, string) Sets the stored program and parameter list for the Poke command. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The stored program context in which the command is executed. paramsList string A string representation of the parameters."
  },
  "api/ASE_Assignment.RealApp.html": {
    "href": "api/ASE_Assignment.RealApp.html",
    "title": "Class RealApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class RealApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a real (floating-point) data type in the application with additional functionality. public class RealApp : Real, ICommand Inheritance object Command Evaluation Real RealApp Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Applies restrictions or constraints specific to the real data type. This method can be overridden to define custom rules for real values. public override void Restrictions()"
  },
  "api/ASE_Assignment.WhileApp.html": {
    "href": "api/ASE_Assignment.WhileApp.html",
    "title": "Class WhileApp | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Class WhileApp Namespace ASE_Assignment Assembly ASE Assignment_Aayusha_Maharjan_77356768.dll Represents a \"while\" loop command in the application, allowing execution of a block of commands repeatedly based on a condition. public class WhileApp : CompoundCommandApp, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ConditionalCommandApp CompoundCommandApp WhileApp Implements ICommand Inherited Members CompoundCommandApp.CorrespondingCommand CompoundCommandApp.CheckParameters(string[]) CompoundCommandApp.Compile() CompoundCommandApp.ResetOrDecreaseCount(int) ConditionalCommandApp.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WhileApp() Initializes a new instance of the WhileApp class. public WhileApp() Methods ReduceRestrictions() Reduces restrictions or constraints for the execution of the \"while\" loop. This method can be used to relax certain rules during the execution of the loop. protected void ReduceRestrictions()"
  },
  "api/ASE_Assignment.html": {
    "href": "api/ASE_Assignment.html",
    "title": "Namespace ASE_Assignment | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Namespace ASE_Assignment Classes AppStoredProgram Represents a stored program application for managing canvas commands and variables. ArrayApp Represents an array application command that handles operations on arrays such as \"poke\" and \"peek\". This class supports both integer and real arrays. BooleanApp Represents a Boolean application command, extending the functionality of the base BOOSE.Boolean class. CastApp Represents the \"Cast\" command, used to cast values between variables of the different types. ComdCircle Represents a command to draw a circle on a canvas. ComdClear Represents a command to clear all elements from the canvas. ComdDrawTo ComdFill A command class that fills a shape on the canvas based on the given text. ComdMoveTo Represents a command to move the canvas cursor to specified coordinates. ComdPenColour Represents a command to set the pen color using RGB values. ComdRectangle Represents a command to draw a rectangle on a canvas. ComdReset Represents a command to reset the canvas. ComdTriangle Represents a command to draw a triangle on a canvas. ComdWriteText Represents a command that writes text on a canvas. CompoundCommandApp ConditionalCommandApp ElseApp Represents the \"Else\" command in the application, used for handling conditional branching. EndApp Represents the \"End\" command in the application, used to mark the end of compound commands such as loops or its conditional statements. ForApp Form1 GlobalConfig IfApp Represents a conditional \"If\" statement in the application, allowing for conditional execution of commands. IntApp Represents an integer variable or operation in the application. MethodApp PeekApp Represents a command to perform a Peek operation on an array, allowing retrieval of array elements. PokeApp Represents a command to perform a Poke operation on an array, allowing modification of array elements. RealApp Represents a real (floating-point) data type in the application with additional functionality. WhileApp Represents a \"while\" loop command in the application, allowing execution of a block of commands repeatedly based on a condition."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE_Assignment_Aayusha_Maharjan_77356768",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}